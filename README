+------------------------------------+
| Easy_format: indentation made easy |
+------------------------------------+


Introduction
============

This module offers classic C-style indentation.
It provides a simplified interface to 
the Format module of the standard library.

Input data must be first modelled as a tree using 3 kinds of nodes:
- atoms
- lists
- labelled nodes

Atoms represent any text that is guaranteed to be printed as-is.
Lists can model any sequence of items such as arrays of data
or lists of definitions that are labelled with something 
like "int main", "let x =" or "x:".



Indentation rules
=================

Indentation is performed using ASCII space character, 
and whitespace as produced by the Format module.
The current implementation uses reasonable characters: ASCII space ' '
and ASCII line feeds '\n' although the output functions may perform 
a conversion, i.e. convert "\n" into "\r\n" on Windows out_channels opened
in text mode.

No strict indentation rules are guaranteed. The target language, if any,
is assumed to treat any sequence of whitespace characters 
between nodes as insignificant.


Examples
========

Complete, executable examples are provided with the distribution.



Frequent patterns
=================



1. Sticky opening
   --------------

label opening ... closing

or

label opening
  ...
closing


Parameters:
  stick_to_label = true
  align_closing = true


2. Non-sticky opening
   ------------------

label opening item1 item2 closing

or

label
  opening
    ...
  closing


Parameters:
  stick_to_label = false
  align_closing = true


3. Sequence
   --------

label opening ... closing

or

label
opening
  ...
closing


Parameters:
  indent_after_label = 0
  stick_to_label = false
  align_closing = true



4. Indented list
   -------------

opening item1 item2 closing

or

opening
  item1
  item2
closing


Parameters:
  indent_items = 2
  align_closing = true



5. Wrapped list
   ------------

opening item1 item2 item3 closing

or

opening item1 item2
        item3 closing


Parameters:
  align_closing = false



6. Padding
   -------

( item1 item2 )

or

(
  item1
  item2
)


Parameters:
  space_after_opening = true
  space_before_closing = true



7. No padding
   ----------

(item1 item2)

or

(
  item1
  item2
)


Parameters:
  space_after_opening = false
  space_before_closing = false



8. Space after separator
   ---------------------

opening item1, item2 closing

or

opening
  item1,
  item2
closing


Parameters:
  space_after_separator = true



9. No space after separator
   ------------------------

opening item1,item2 closing

or

opening
  item1,
  item2
closing


Parameters:
  space_after_separator = false
